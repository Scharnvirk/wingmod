{"version":3,"sources":["../../../../src/actor/physics/Collisions.js"],"names":[],"mappings":"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","file":"Collisions.js","sourcesContent":["function Collisions(masterManager){\r\n    this.masterManager = masterManager;\r\n    this.collisionClassMap = this.makeCollisionClassMap();\r\n    this.fineCheckCount = 0;\r\n    this.coarseCheckCount = 0;\r\n    this.counter = 0;\r\n}\r\n\r\nCollisions.prototype.makeCollisionClassMap = function(){\r\n    return {\r\n        'object': ['object', 'explosion', 'ship', 'level'],\r\n        'explosion': ['ship'],\r\n        'ship': ['ship', 'level']\r\n    };\r\n};\r\n\r\nCollisions.prototype.update = function(){\r\n    this.coarseCheck();\r\n\r\n    this.counter ++;\r\n    if(this.counter > 60){\r\n        console.log('coarse collisions:', this.coarseCheckCount);\r\n        this.counter = 0;\r\n        this.fineCheckCount = 0;\r\n        this.coarseCheckCount = 0;\r\n    }\r\n};\r\n\r\nCollisions.prototype.coarseCheck = function(){\r\n    var collisionMap = this.masterManager.collisionMap;\r\n    var actorA, actorB, collisionCell;\r\n    var collisionIndices = Object.keys(collisionMap);\r\n    for(var c = 0; c < collisionIndices.length; c ++){\r\n        collisionCell = collisionMap[collisionIndices[c]];\r\n        if(collisionCell && collisionCell.length > 1){\r\n            if(this.counter === 0) this.coarseCheckCount ++;\r\n            for(var i = 0; i <= collisionCell.length; i++){\r\n                for(var j = i + 1; j < collisionCell.length; j++){\r\n                    actorA = collisionCell[i];\r\n                    actorB = collisionCell[j];\r\n                    if(\r\n                        actorA.position.x + actorA.diameter > actorB.position.x - actorB.diameter ||\r\n                        actorA.position.x - actorA.diameter < actorB.position.x + actorB.diameter ||\r\n                        actorA.position.y + actorA.diameter > actorB.position.y - actorB.diameter ||\r\n                        actorA.position.y - actorA.diameter < actorB.position.y + actorB.diameter\r\n                    ){\r\n                        if(actorA.actorsCollidingWith.indexOf(actorB) < 0) actorA.actorsCollidingWith.push(actorB);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\n//\r\n// Collisions.prototype.gridCollisionCheck = function(actors){\r\n//     var collisionGrid = this.fillRoughCollisionGrid(actors);\r\n//     var a = true;\r\n// };\r\n//\r\n// Collisions.prototype.gridCollisionCheck = function(actors){\r\n//     var collisionGrid = {};\r\n//     var index = 0;\r\n//     actors.forEach((actor)=>{\r\n//         var diameter = actor.diameter / 2;\r\n//         var indices = [];\r\n//         indices.push((Math.floor((actor.position.x - diameter) / this.GRID_BOX_SIDE_LENGTH) + 1 + this.HALF_EDGE) + (Math.floor((actor.position.y - diameter) / this.GRID_BOX_SIDE_LENGTH) + 1 + this.HALF_EDGE)* this.BOXES_PER_GRID_EDGE);\r\n//         indices.push((Math.floor((actor.position.x - diameter) / this.GRID_BOX_SIDE_LENGTH) + 1 + this.HALF_EDGE) + (Math.floor((actor.position.y + diameter) / this.GRID_BOX_SIDE_LENGTH) + 1 + this.HALF_EDGE)* this.BOXES_PER_GRID_EDGE);\r\n//         indices.push((Math.floor((actor.position.x + diameter) / this.GRID_BOX_SIDE_LENGTH) + 1 + this.HALF_EDGE) + (Math.floor((actor.position.y - diameter) / this.GRID_BOX_SIDE_LENGTH) + 1 + this.HALF_EDGE)* this.BOXES_PER_GRID_EDGE);\r\n//         indices.push((Math.floor((actor.position.x + diameter) / this.GRID_BOX_SIDE_LENGTH) + 1 + this.HALF_EDGE) + (Math.floor((actor.position.y + diameter) / this.GRID_BOX_SIDE_LENGTH) + 1 + this.HALF_EDGE)* this.BOXES_PER_GRID_EDGE);\r\n//\r\n//         for(var j = 0; j<3; j++){\r\n//             if( collisionGrid[indices[j]]){\r\n//                 if(collisionGrid[indices[j]].indexOf(actor) < 0 ){\r\n//                      collisionGrid[indices[j]].push(actor);\r\n//                 }\r\n//             } else {\r\n//                 collisionGrid[indices[j]] = [actor];\r\n//             }\r\n//         }\r\n//     });\r\n//     return collisionGrid;\r\n// };\r\n//\r\n// Collisions.prototype.gridIntersect2D = function(actors, H) {\r\n//     var grid = {}, result = [], x = [0,0];\r\n//     actors.forEach(function(actor, id) {\r\n//         for(x[0]=Math.floor((actor.position.x - actor.diameter) / H); x[0]<=Math.ceil((actor.position.y + actor.diameter) / H); ++x[0])\r\n//             for(x[1]=Math.floor((actor.position.x + actor.diameter) / H); x[1]<=Math.ceil((actor.position.y - actor.diameter) / H); ++x[1]) {\r\n//                 var list = grid[x];\r\n//                 if(list) {\r\n//                     list.forEach(function(otherId) {\r\n//                         var a = actors[otherId];\r\n//\r\n//                         var s = Math.max(a.position.x - a.diameter, actor.position.x - actor.diameter);\r\n//                         var t = Math.min(a.position.y + a.diameter, actor.position.y + actor.diameter);\r\n//                         if(t < s || Math.floor(s/H) !== x[0]) return;\r\n//\r\n//                         s = Math.max(a.position.x + a.diameter, actor.position.x + actor.diameter);\r\n//                         t = Math.min(a.position.y - a.diameter, actor.position.y - actor.diameter);\r\n//                         if(t < s || Math.floor(s/H) !== x[1]) return;\r\n//\r\n//                         result.push([id, otherId]);\r\n//                     });\r\n//                     list.push(id);\r\n//                 } else {\r\n//                     grid[x] = [id];\r\n//                 }\r\n//             }\r\n//     });\r\n//     return result;\r\n// };\r\n"]}