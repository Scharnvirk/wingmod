{"version":3,"sources":["../../../../src/actor/physics/BasePhysics.js"],"names":[],"mappings":";;;;;;IAAM,WAAW;AACb,aADE,WAAW,CACD,KAAK,EAAE,iBAAiB,EAAC;8BADnC,WAAW;;AAET,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;AAEnB,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;AACzB,YAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;AAC/B,YAAI,CAAC,KAAK,GAAG,CAAC,CAAC;;AAEf,YAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AAClB,YAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AACtB,YAAI,CAAC,YAAY,GAAG,CAAC,CAAC;;AAEtB,YAAI,CAAC,cAAc,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC;;;AAAC,AAG7C,YAAI,CAAC,gBAAgB,EAAE,CAAC;;AAExB,YAAI,CAAC,KAAK,GAAG,CAAC,CAAC;KAClB;;iBAlBC,WAAW;;8CAoBQ;AACjB,mBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;SACrC;;;kDAEwB;AACrB,gBAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SAC1C;;;oCAEW,KAAK,EAAE,MAAM,EAAC;AACtB,gBAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,YAAY,CAAA,IAAK,CAAC,GAAC,IAAI,CAAC,YAAY,CAAA,AAAC,CAAC;AACvI,gBAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,YAAY,CAAA,IAAK,CAAC,GAAC,IAAI,CAAC,YAAY,CAAA,AAAC,CAAC;AACvI,gBAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;AAC1C,gBAAI,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;SACtF;;;2CAEiB;;;AACd,kBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAG;AAC1D,sBAAK,QAAQ,CAAC,GAAG,MAAK,KAAK,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;aAC3D,CAAC,CAAC;SACN;;;+BAEM,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAC;AAC3B,gBAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,gBAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;AAEzB,gBAAI,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;;AAEhC,gBAAI,CAAC,uBAAuB,EAAE,CAAC;AAC/B,gBAAI,CAAC,KAAK,EAAE,CAAC;SAChB;;;WAjDC,WAAW","file":"BasePhysics.js","sourcesContent":["class BasePhysics {\r\n    constructor(actor, physicsProperties){\r\n        this.actor = actor;\r\n\r\n        this.angle = actor.angle;\r\n        this.position = actor.position;\r\n        this.speed = 0;\r\n\r\n        this.friction = 0;\r\n        this.acceleration = 0;\r\n        this.deceleration = 0;\r\n\r\n        this.velocityVector = new THREE.Vector2(0,0);\r\n        //this.accelerationVector = new THREE.Vector2(0,0);\r\n\r\n        this.updateProperties();\r\n\r\n        this.clock = 0;\r\n    }\r\n\r\n    getPositionAndAngle(){\r\n        return[this.position, this.angle];\r\n    }\r\n\r\n    calculatePositionVector(){\r\n        this.position.add(this.velocityVector);\r\n    }\r\n\r\n    setVelocity(angle, thrust){\r\n        this.velocityVector.x = (this.velocityVector.x + Math.sin(Utils.degToRad(angle)) * thrust * this.acceleration) * (1-this.deceleration);\r\n        this.velocityVector.y = (this.velocityVector.y + Math.cos(Utils.degToRad(angle)) * thrust * this.acceleration) * (1-this.deceleration);\r\n        var length = this.velocityVector.length();\r\n        this.velocityVector.setLength(length > this.friction ? length - this.friction : 0);\r\n    }\r\n\r\n    updateProperties(){\r\n        Object.keys(this.actor.physicsProperties).forEach((property)=>{\r\n            this[property] = this.actor.physicsProperties[property];\r\n        });\r\n    }\r\n\r\n    update(position, angle, thrust){\r\n        this.angle = angle;\r\n        this.position = position;\r\n\r\n        this.setVelocity(angle, thrust);\r\n\r\n        this.calculatePositionVector();\r\n        this.clock++;\r\n    }\r\n}\r\n"]}