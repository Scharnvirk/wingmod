{"version":3,"sources":["../../../src/actor/BaseActor.js"],"names":[],"mappings":"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","file":"BaseActor.js","sourcesContent":["class BaseActor{\n    constructor(position, angle, positionZ, diameter){\n        if(position && (position instanceof THREE.Vector2 !== true)) throw 'ERROR: invalid position vector for actor';\n\n        this.position = position || new THREE.Vector2(0,0);\n        this.positionZ = positionZ || 10;\n        this.diameter = diameter || 0;\n\n        this.angle = angle || 0;\n        this.thrust = 0;\n\n        this.physicsProperties = {\n            friction: 0,\n            acceleration: 0,\n            deceleration: 0,\n        };\n    }\n\n    getPVAS(){\n        return [this.position, this.angle];\n    }\n\n    updatePositionAndAngle(positionAndAngle){\n        this.position = positionAndAngle[0];\n        this.angle = positionAndAngle[1];\n    }\n\n    update(){\n        this.fixAngleRollover();\n        //var oldAngle = this.angle;\n\n        if (this.controls){\n            this.controls.update();\n        }\n\n        this.customUpdate();\n\n        if (this.physics){\n            this.physics.update(this.position, this.angle, this.thrust);\n            this.updatePositionAndAngle(this.physics.getPositionAndAngle());\n        }\n\n        if (this.mesh){\n            this.mesh.update(this.position, this.angle, this.positionZ);\n        }\n\n        if (this.light){\n            this.light.update(this.position, this.angle);\n        }\n\n\n    }\n\n    customUpdate(){}\n\n    addToScene(scene){\n        if (this.mesh){\n            scene.add(this.mesh.get());\n        }\n\n        if (this.light){\n            scene.add(this.light.get());\n        }\n    }\n\n    removeFromScene(scene){\n        if (this.mesh){\n            scene.remove(this.mesh.get());\n        }\n\n        if (this.light){\n            scene.remove(this.light.get());\n            delete this.light.get();\n        }\n    }\n\n    fixAngleRollover(){\n        if (this.angle > 360) this.angle -= 360;\n        if (this.angle < 0) this.angle += 360;\n    }\n\n    updatePhysicsProperties(physicsProperties){\n        if(physicsProperties instanceof 'object' !== true) throw 'ERROR: Actor\\'s physicsProperties must be object';\n        this.physicsProperties = physicsProperties;\n\n        if(this.physics) this.physics.updateProperties(physicsProperties);\n    }\n\n}\n"]}