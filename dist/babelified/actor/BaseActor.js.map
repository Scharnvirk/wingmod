{"version":3,"sources":["../../../src/actor/BaseActor.js"],"names":[],"mappings":";;;;;;IAAM,SAAS;AACX,aADE,SAAS,CACC,MAAM,EAAC;8BADjB,SAAS;;AAEP,cAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5B,YAAI,CAAC,cAAc,GAAG,EAAE,CAAC;;AAEzB,YAAG,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,CAAC;;AAExB,YAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AACzC,YAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,EAAE,CAAC;;AAExC,YAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC;AAC/B,YAAI,CAAC,MAAM,GAAG,CAAC,CAAC;KAEnB;;iBAbC,SAAS;;iCAeH;;;AAGJ,gBAAI,IAAI,CAAC,QAAQ,EAAC;AACd,oBAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;aAC1B;;AAED,gBAAI,CAAC,YAAY,EAAE,CAAC;;AAEpB,gBAAI,IAAI,CAAC,IAAI,EAAC;AACV,oBAAI,CAAC,qBAAqB,EAAE,CAAC;aAChC;;AAED,gBAAI,IAAI,CAAC,IAAI,EAAC;AACV,oBAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/D;;AAED,gBAAI,IAAI,CAAC,KAAK,EAAC;AACX,oBAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;aAChD;SACJ;;;2CAEiB;AACd,iBAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC,EAAE,EAAC;AAC7C,oBAAI,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;aACvC;AACD,gBAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;SACjC;;;uCAEa,EAAE;;;mCAEL,KAAK,EAAC;AACb,gBAAI,IAAI,CAAC,IAAI,EAAC;AACV,qBAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;aAC9B;;AAED,gBAAI,IAAI,CAAC,KAAK,EAAC;AACX,qBAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;aAC/B;SACJ;;;wCAEe,KAAK,EAAC;AAClB,gBAAI,IAAI,CAAC,IAAI,EAAC;AACV,qBAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;aACjC;;AAED,gBAAI,IAAI,CAAC,KAAK,EAAC;AACX,qBAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;AAC/B,uBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;aAC3B;SACJ;;;;;;;;;gDAOsB;AACnB,gBAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AACnC,gBAAI,CAAC,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAChD;;;WA3EC,SAAS","file":"BaseActor.js","sourcesContent":["class BaseActor{\n    constructor(config){\n        Object.assign(this, config);\n        this.collisionCells = [];\n\n        if(!config) config = {};\n\n        this.position = config.position || [0,0];\n        this.positionZ = config.positionZ || 10;\n\n        this.angle = config.angle || 0;\n        this.thrust = 0;\n\n    }\n\n    update(){\n        //this.fixAngleRollover();\n\n        if (this.controls){\n            this.controls.update();\n        }\n\n        this.customUpdate();\n\n        if (this.body){\n            this.updatePhysicsFromBody();\n        }\n\n        if (this.mesh){\n            this.mesh.update(this.position, this.angle, this.positionZ);\n        }\n\n        if (this.light){\n            this.light.update(this.position, this.angle);\n        }\n    }\n\n    handleCollisions(){\n        for(var i = 0; i < this.actorsCollidingWith; i++){\n            var x = this.actorsCollidingWith[i];\n        }\n        this.actorsCollidingWith = [];\n    }\n\n    customUpdate(){}\n\n    addToScene(scene){\n        if (this.mesh){\n            scene.add(this.mesh.get());\n        }\n\n        if (this.light){\n            scene.add(this.light.get());\n        }\n    }\n\n    removeFromScene(scene){\n        if (this.mesh){\n            scene.remove(this.mesh.get());\n        }\n\n        if (this.light){\n            scene.remove(this.light.get());\n            delete this.light.get();\n        }\n    }\n\n    // fixAngleRollover(){\n    //     if (this.angle > 360) this.angle -= 360;\n    //     if (this.angle < 0) this.angle += 360;\n    // }\n\n    updatePhysicsFromBody(){\n        this.position = this.body.position;\n        this.angle = Utils.radToDeg(this.body.angle);\n    }\n}\n"]}