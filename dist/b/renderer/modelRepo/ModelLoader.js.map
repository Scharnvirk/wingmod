{"version":3,"sources":["../../../../src/renderer/modelRepo/ModelLoader.js"],"names":[],"mappings":";;;;;;IAAM,WAAW;AACb,aADE,WAAW,CACD,UAAU,EAAC;8BADrB,WAAW;;AAET,YAAG,CAAC,UAAU,EAAE,MAAM,2DAA2D,CAAC;AAClF,YAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,YAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;AAEnB,aAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,eAAe,CAAC,CAAC;KAC5C;;iBARC,WAAW;;qCAUD;;;AACR,gBAAG,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,0DAA0D,CAAC;;AAElF,gBAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;AAEpB,gBAAI,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;AACpC,gBAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS,EAAE,KAAK,EAAG;AACxC,sBAAK,KAAK,CAAC,MAAK,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG;AACxC,4BAAQ,EAAE,IAAI;AACd,4BAAQ,EAAE,IAAI;AACd,0BAAM,EAAE,KAAK;iBAChB,CAAC;;AAEF,sBAAM,CAAC,IAAI,CAAC,SAAS,EAAE,UAAC,QAAQ,EAAE,QAAQ,EAAK;AAC3C,wBAAI,KAAK,GAAG,MAAK,KAAK,CAAC,MAAK,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;AACtD,yBAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC1B,yBAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC1B,yBAAK,CAAC,MAAM,GAAG,IAAI,CAAC;;AAEpB,wBAAG,MAAK,aAAa,EAAE,EAAC;AACpB,8BAAK,WAAW,EAAE,CAAC;qBACtB;iBACJ,CAAC,CAAC;aACN,CAAC,CAAC;SACN;;;wCAEc;AACX,gBAAI,MAAM,GAAG,IAAI,CAAC;;AAElB,iBAAK,IAAI,SAAS,IAAI,IAAI,CAAC,KAAK,EAAE;AAC9B,oBAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,MAAM,EAAC;AAC7B,0BAAM,GAAG,KAAK,CAAC;AACf,2BAAO,KAAK,CAAC;iBAChB;aACJ;;AAED,mBAAO,MAAM,CAAC;SACjB;;;mCAES;AACN,mBAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;qCAEW;AACR,gBAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACnB;;;sCAEY;AACT,gBAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACnB,gBAAI,CAAC,aAAa,CAAC,EAAC,IAAI,EAAC,QAAQ,EAAC,CAAC,CAAC;SACvC;;;sCAEa,IAAI,EAAC;AACf,gBAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AAC/C,gBAAG,CAAC,IAAI,EAAE,MAAM,yBAAyB,GAAG,IAAI,CAAC;AACjD,mBAAO,IAAI,CAAC;SACf;;;WAlEC,WAAW","file":"ModelLoader.js","sourcesContent":["class ModelLoader{\r\n    constructor(modelPaths){\r\n        if(!modelPaths) throw \"ERROR: No model paths have been specified for the loader!\";\r\n        this.modelPaths = modelPaths;\r\n        this.batch = {};\r\n        this.loaded = true;\r\n\r\n        Utils.mixin(this, THREE.EventDispatcher);\r\n    }\r\n\r\n    loadModels(){\r\n        if(!this.loaded) throw 'ERROR: ModelLoader is still busy loading previous batch!';\r\n\r\n        this.loaded = false;\r\n\r\n        var loader = new THREE.JSONLoader();\r\n        this.modelPaths.forEach((modelPath, index)=>{\r\n            this.batch[this._getModelName(modelPath)] = {\r\n                geometry: null,\r\n                material: null,\r\n                loaded: false\r\n            };\r\n\r\n            loader.load(modelPath, (geometry, material) => {\r\n                var model = this.batch[this._getModelName(modelPath)];\r\n                model.geometry = geometry;\r\n                model.material = material;\r\n                model.loaded = true;\r\n\r\n                if(this.checkIfLoaded()){\r\n                    this._doneAction();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    checkIfLoaded(){\r\n        var result = true;\r\n\r\n        for (var modelName in this.batch) {\r\n            if(!this.batch[modelName].loaded){\r\n                result = false;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getBatch(){\r\n        return this.batch;\r\n    }\r\n\r\n    clearBatch(){\r\n        this.batch = {};\r\n    }\r\n\r\n    _doneAction(){\r\n        this.loaded = true;\r\n        this.dispatchEvent({type:'loaded'});\r\n    }\r\n\r\n    _getModelName(path){\r\n        var name = path.split('.')[0].split('/').pop();\r\n        if(!name) throw 'ERROR: Bad model path: ' + path;\r\n        return name;\r\n    }\r\n}\r\n"]}