var RenderBus = require("wm/logic/RenderBus");
var GameWorld = require("wm/logic/GameWorld");
var ActorManager = require("wm/logic/actorManagement/ActorManager");
var GameScene = require("wm/logic/GameScene");

function Core(worker){
    this.makeMainComponents(worker);
    this.startGameLoop();
    this.scene.fillScene();
    this.initFpsCounter();

    this.running = false;
}

Core.prototype.makeMainComponents = function(worker){
    this.renderBus = new RenderBus({worker: worker, core: this});
    this.world = new GameWorld();
    this.actorManager = new ActorManager({world: this.world, core: this});
    this.scene = new GameScene({world: this.world, actorManager: this.actorManager, core: this});
};

Core.prototype.initFpsCounter = function(){
    this.logicTicks = 0;
    if(Constants.SHOW_FPS){
        setInterval(()=>{
            console.log('logicTicks: ', this.logicTicks);
            this.logicTicks = 0;
        }, 1000);
    }
};

Core.prototype.processGameLogic = function(){
    if(this.running){
        this.doTick();
    }
};

Core.prototype.doTick = function(){
    this.actorManager.update(this.renderBus.inputState);
    this.world.step(1 / Constants.LOGIC_REFRESH_RATE);
    this.renderBus.postMessage('updateActors', this.world.makeUpdateData());
    this.logicTicks ++;
    this.scene.update();
};

Core.prototype.startGameLoop = function(){
    var logicLoop = new THREEx.PhysicsLoop(Constants.LOGIC_REFRESH_RATE);
    logicLoop.add(this.processGameLogic.bind(this));
    logicLoop.start();
};

Core.prototype.start = function(){
    this.running = true;
};

Core.prototype.pause = function(){
    this.running = false;
};

module.exports = Core;
